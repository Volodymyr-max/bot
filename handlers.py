from telegram import Update, ChatPermissions
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from database import (
    add_user,
    get_user,
    update_user,
    delete_user,
    list_users,
)
import datetime

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
QUESTIONS = [
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID –≤ PUBG:",
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:",
]

# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
user_steps = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ /register —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_steps[user_id] = {"step": 0, "data": {}}
    await update.message.reply_text(QUESTIONS[0])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_steps:
        return

    step_info = user_steps[user_id]
    step = step_info["step"]
    data = step_info["data"]
    text = update.message.text.strip()

    if step == 0:
        data["game_id"] = text
    elif step == 1:
        data["name"] = text
    elif step == 2:
        data["age"] = text
    elif step == 3:
        data["region"] = text
        add_user(user_id, data["game_id"], data["name"], data["age"], data["region"])
        del user_steps[user_id]
        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /me")
        return

    step_info["step"] += 1
    await update.message.reply_text(QUESTIONS[step_info["step"]])

async def me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if user:
        response = (
            f"üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"üéÆ ID: <code>{user[1]}</code>\n"
            f"üßë –ò–º—è: {user[2]}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user[3]}\n"
            f"üìç –û–±–ª–∞—Å—Ç—å: {user[4]}"
        )
        await update.message.reply_html(response)
    else:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /register.")

async def update_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_steps[user_id] = {"step": 0, "data": {}}
    await update.message.reply_text("–û–±–Ω–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. " + QUESTIONS[0])

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_steps:
        del user_steps[user_id]
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(CommandHandler("me", me))
    app.add_handler(CommandHandler("update_me", update_me))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
